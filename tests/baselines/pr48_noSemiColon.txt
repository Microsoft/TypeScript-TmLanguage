original file
-----------------------------------
class Test {
	^^private ^^data: TemplateData[] = []
	^^private ^^options: TemplateOptions = {}
	^^private ^^state = {}
}

^^export ^^type ^^Stats = fs.Stats
^^export ^^const ^^touch = thenify(tch)

/**
 * Verify comments
 */
^^export ^^function isFile(path: string): ^^Promise<boolean> {
	^^return stat(path).then(stat => stat.isFile(), () => false)
}


^^export ^^const readFile = thenify<^^string, string, string>(fs.readFile)
^^export ^^const writeFile = thenify<^^string, string | Buffer, void>(fs.writeFile)


-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>class Test {
>	private data: TemplateData[] = []
  ^^^^^^^
  [2, 2]: source.ts meta.class.ts storage.modifier.ts 
          ^^^^
          [2, 10]: source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts 
>	private options: TemplateOptions = {}
  ^^^^^^^
  [3, 2]: source.ts meta.class.ts storage.modifier.ts 
          ^^^^^^^
          [3, 10]: source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts 
>	private state = {}
  ^^^^^^^
  [4, 2]: source.ts meta.class.ts storage.modifier.ts 
          ^^^^^
          [4, 10]: source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts 
>}
>
>export type Stats = fs.Stats
 ^^^^^^
 [7, 1]: source.ts meta.type.declaration.ts keyword.control.export.ts 
        ^^^^
        [7, 8]: source.ts meta.type.declaration.ts storage.type.type.ts 
             ^^^^^
             [7, 13]: source.ts meta.type.declaration.ts entity.name.type.ts 
>export const touch = thenify(tch)
 ^^^^^^
 [8, 1]: source.ts meta.var.expr.ts keyword.control.export.ts 
        ^^^^^
        [8, 8]: source.ts meta.var.expr.ts storage.type.ts 
              ^^^^^
              [8, 14]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts 
>
>/**
> * Verify comments
> */
>export function isFile(path: string): Promise<boolean> {
 ^^^^^^
 [13, 1]: source.ts meta.function.ts keyword.control.export.ts 
        ^^^^^^^^
        [13, 8]: source.ts meta.function.ts storage.type.function.ts 
                                       ^^^^^^^
                                       [13, 39]: source.ts meta.function.ts meta.return.type.ts entity.name.type.ts 
>	return stat(path).then(stat => stat.isFile(), () => false)
  ^^^^^^
  [14, 2]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>}
>
>
>export const readFile = thenify<string, string, string>(fs.readFile)
 ^^^^^^
 [18, 1]: source.ts meta.var.expr.ts keyword.control.export.ts 
        ^^^^^
        [18, 8]: source.ts meta.var.expr.ts storage.type.ts 
                                 ^^^^^^
                                 [18, 33]: source.ts meta.var.expr.ts meta.function-call.ts meta.type.parameters.ts support.type.primitive.ts 
>export const writeFile = thenify<string, string | Buffer, void>(fs.writeFile)
 ^^^^^^
 [19, 1]: source.ts meta.var.expr.ts keyword.control.export.ts 
        ^^^^^
        [19, 8]: source.ts meta.var.expr.ts storage.type.ts 
                                  ^^^^^^
                                  [19, 34]: source.ts meta.var.expr.ts meta.function-call.ts meta.type.parameters.ts support.type.primitive.ts 
>
>