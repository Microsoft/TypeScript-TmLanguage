original file
-----------------------------------
//Test For Scopes

^^import ^^* ^^as req ^^from "./Required"
import { Scale } from "./scale";

^^if (object.^^instanceof(ClassNew)) {
}

^^class ^^class1(){
	^^static ^^functioname(){

	}
}

^^export ^^class className(){
	^^private ^^state = { }
}

^^void ^^newFunctionName(){

	^^var c = a ^^+ b;

	^^switch (someNum) {
		^^case 1: break;
		^^case 2: break;
		^^default: break;
	} 

}

/**
 * Verify comments
 */

^^module M {
    ^^export function myFun(x: number) {
        return x;
    }
}

var m: ^^typeof M = M;

var adder = ^^new Adder(3, 4);
^^delete (adder)

var s = typeof {}git 
interface I {}
var j: I = {}


^^module ^^Body {
    ^^export ^^class ^^Cell {
        ^^public ^^parent: ^^Cell;

        ^^constructor(^^parent: ^^Cell) {
            ^^this.parent = ^^parent;
            if (^^typeof ^^parent ^^=== ^^'object' || ^^parent ^^instanceof ^^Error) {
            	^^
            }
        }
    }
}

/*
^^
  End of file

*/
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>//Test For Scopes
>
>import * as req from "./Required"
 ^^^^^^
 [3, 1]: source.ts meta.import.ts keyword.control.import.ts 
        ^
        [3, 8]: source.ts meta.import.ts constant.language.import-export-all.ts 
          ^^
          [3, 10]: source.ts meta.import.ts keyword.control.as.ts 
                 ^^^^
                 [3, 17]: source.ts meta.import.ts keyword.control.from.ts 
>import { Scale } from "./scale";
>
>if (object.instanceof(ClassNew)) {
 ^^
 [6, 1]: source.ts keyword.control.conditional.ts 
            ^^^^^^^^^^
            [6, 12]: source.ts meta.function-call.ts entity.name.function.ts 
>}
>
>class class1(){
 ^^^^^
 [9, 1]: source.ts meta.class.ts storage.type.class.ts 
       ^^^^^^
       [9, 7]: source.ts meta.class.ts entity.name.type.class.ts 
>	static functioname(){
  ^^^^^^
  [10, 2]: source.ts meta.class.ts storage.modifier.ts 
         ^^^^^^^^^^^
         [10, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>
>	}
>}
>
>export class className(){
 ^^^^^^
 [15, 1]: source.ts meta.class.ts keyword.control.export.ts 
        ^^^^^
        [15, 8]: source.ts meta.class.ts storage.type.class.ts 
>	private state = { }
  ^^^^^^^
  [16, 2]: source.ts meta.class.ts storage.modifier.ts 
          ^^^^^
          [16, 10]: source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts 
>}
>
>void newFunctionName(){
 ^^^^
 [19, 1]: source.ts keyword.operator.expression.void.ts 
      ^^^^^^^^^^^^^^^
      [19, 6]: source.ts meta.function-call.ts entity.name.function.ts 
>
>	var c = a + b;
  ^^^
  [21, 2]: source.ts meta.block.ts meta.var.expr.ts storage.type.ts 
            ^
            [21, 12]: source.ts meta.block.ts meta.var.expr.ts keyword.operator.arithmetic.ts 
>
>	switch (someNum) {
  ^^^^^^
  [23, 2]: source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts keyword.control.switch.ts 
>		case 1: break;
   ^^^^
   [24, 3]: source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts 
>		case 2: break;
   ^^^^
   [25, 3]: source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts 
>		default: break;
   ^^^^^^^
   [26, 3]: source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts 
>	} 
>
>}
>
>/**
> * Verify comments
> */
>
>module M {
 ^^^^^^
 [35, 1]: source.ts meta.namespace.declaration.ts storage.type.namespace.ts 
>    export function myFun(x: number) {
     ^^^^^^
     [36, 5]: source.ts meta.block.ts meta.function.ts keyword.control.export.ts 
>        return x;
>    }
>}
>
>var m: typeof M = M;
        ^^^^^^
        [41, 8]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.operator.expression.typeof.ts 
>
>var adder = new Adder(3, 4);
             ^^^
             [43, 13]: source.ts meta.var.expr.ts new.expr.ts keyword.operator.new.ts 
>delete (adder)
 ^^^^^^
 [44, 1]: source.ts keyword.operator.expression.delete.ts 
>
>var s = typeof {}git 
>interface I {}
>var j: I = {}
>
>
>module Body {
 ^^^^^^
 [51, 1]: source.ts meta.namespace.declaration.ts storage.type.namespace.ts 
        ^^^^
        [51, 8]: source.ts meta.namespace.declaration.ts entity.name.type.module.ts 
>    export class Cell {
     ^^^^^^
     [52, 5]: source.ts meta.block.ts meta.class.ts keyword.control.export.ts 
            ^^^^^
            [52, 12]: source.ts meta.block.ts meta.class.ts storage.type.class.ts 
                  ^^^^
                  [52, 18]: source.ts meta.block.ts meta.class.ts entity.name.type.class.ts 
>        public parent: Cell;
         ^^^^^^
         [53, 9]: source.ts meta.block.ts meta.class.ts storage.modifier.ts 
                ^^^^^^
                [53, 16]: source.ts meta.block.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts 
                        ^^^^
                        [53, 24]: source.ts meta.block.ts meta.class.ts meta.field.declaration.ts meta.type.annotation.ts entity.name.type.ts 
>
>        constructor(parent: Cell) {
         ^^^^^^^^^^^
         [55, 9]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts storage.type.ts 
                     ^^^^^^
                     [55, 21]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts 
                             ^^^^
                             [55, 29]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts entity.name.type.ts 
>            this.parent = parent;
             ^^^^
             [56, 13]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.language.this.ts 
                           ^^^^^^
                           [56, 27]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.other.readwrite.ts 
>            if (typeof parent === 'object' || parent instanceof Error) {
                 ^^^^^^
                 [57, 17]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.expression.typeof.ts 
                        ^^^^^^
                        [57, 24]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.other.readwrite.ts 
                               ^^^
                               [57, 31]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.comparison.ts 
                                   ^
                                   [57, 35]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts string.quoted.single.ts punctuation.definition.string.begin.ts 
                                               ^^^^^^
                                               [57, 47]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.other.readwrite.ts 
                                                      ^^^^^^^^^^
                                                      [57, 54]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.expression.instanceof.ts 
                                                                 ^^^^^
                                                                 [57, 65]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts support.class.error.ts 
>            	
 ^^^^^^^^^^^^^^
 [58, 14]: source.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.block.ts 
>            }
>        }
>    }
>}
>
>/*
>
 ^
 [65, 1]: source.ts comment.block.ts 
>  End of file
>
>*/