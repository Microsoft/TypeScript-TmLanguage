original file
-----------------------------------
'use strict';

        var pieces = [];
        var numeration = [];

        for (var i in pieces) {
            switch (true) {
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
                case /^\"?Accession\"?/.test(pieces[i]):
                    numeration[0] = i;
                    break;
            }
        }

-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>'use strict';
 ^
 source.ts string.quoted.single.ts punctuation.definition.string.begin.ts
  ^^^^^^^^^^
  source.ts string.quoted.single.ts
            ^
            source.ts string.quoted.single.ts punctuation.definition.string.end.ts
             ^
             source.ts punctuation.terminator.statement.ts
              ^^
              source.ts
>
 ^^
 source.ts
>        var pieces = [];
 ^^^^^^^^
 source.ts
         ^^^
         source.ts meta.var.expr.ts storage.type.ts
            ^
            source.ts meta.var.expr.ts
             ^^^^^^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
                   ^
                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                    ^
                    source.ts meta.var.expr.ts keyword.operator.assignment.ts
                     ^
                     source.ts meta.var.expr.ts
                      ^
                      source.ts meta.var.expr.ts meta.array.literal.ts meta.brace.square.ts
                       ^
                       source.ts meta.var.expr.ts meta.array.literal.ts meta.brace.square.ts
                        ^
                        source.ts punctuation.terminator.statement.ts
                         ^^
                         source.ts
>        var numeration = [];
 ^^^^^^^^
 source.ts
         ^^^
         source.ts meta.var.expr.ts storage.type.ts
            ^
            source.ts meta.var.expr.ts
             ^^^^^^^^^^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
                       ^
                       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                        ^
                        source.ts meta.var.expr.ts keyword.operator.assignment.ts
                         ^
                         source.ts meta.var.expr.ts
                          ^
                          source.ts meta.var.expr.ts meta.array.literal.ts meta.brace.square.ts
                           ^
                           source.ts meta.var.expr.ts meta.array.literal.ts meta.brace.square.ts
                            ^
                            source.ts punctuation.terminator.statement.ts
                             ^^
                             source.ts
>
 ^^
 source.ts
>        for (var i in pieces) {
 ^^^^^^^^
 source.ts
         ^^^
         source.ts keyword.control.loop.ts
            ^
            source.ts
             ^
             source.ts meta.brace.round.ts
              ^^^
              source.ts meta.var.expr.ts storage.type.ts
                 ^
                 source.ts meta.var.expr.ts
                  ^
                  source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
                   ^
                   source.ts
                    ^^
                    source.ts keyword.operator.expression.in.ts
                      ^
                      source.ts
                       ^^^^^^
                       source.ts variable.other.readwrite.ts
                             ^
                             source.ts meta.brace.round.ts
                              ^
                              source.ts
                               ^
                               source.ts meta.block.ts punctuation.definition.block.ts
                                ^^
                                source.ts meta.block.ts
>            switch (true) {
 ^^^^^^^^^^^^
 source.ts meta.block.ts
             ^^^^^^
             source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts keyword.control.switch.ts
                   ^
                   source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts
                    ^
                    source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts meta.brace.round.ts
                     ^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts constant.language.boolean.true.ts
                         ^
                         source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts meta.brace.round.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts
                           ^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.definition.block.ts
                            ^^
                            source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                case /^\"?Accession\"?/.test(pieces[i]):
 ^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                 ^^^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
                     ^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                      ^
                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.begin.ts
                       ^
                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.control.anchor.regexp
                        ^^
                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                           ^^^^^^^^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts
                                    ^^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts constant.character.escape.backslash.regexp
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts keyword.operator.quantifier.regexp
                                       ^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts string.regex.ts punctuation.definition.string.end.ts
                                        ^
                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts punctuation.accessor.ts
                                         ^^^^
                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts support.function.ts
                                             ^
                                             source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                              ^^^^^^
                                              source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts variable.other.readwrite.ts
                                                    ^
                                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                     ^
                                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts variable.other.readwrite.ts
                                                      ^
                                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.array.literal.ts meta.brace.square.ts
                                                       ^
                                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts meta.function-call.ts meta.brace.round.ts
                                                        ^
                                                        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
                                                         ^^
                                                         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    numeration[0] = i;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                ^
                                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts constant.numeric.decimal.ts
                                 ^
                                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                   ^
                                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.operator.assignment.ts
                                    ^
                                    source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                                     ^
                                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts variable.other.readwrite.ts
                                      ^
                                      source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                                       ^^
                                       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>                    break;
 ^^^^^^^^^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
                     ^^^^^
                     source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                          ^
                          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
                           ^^
                           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>            }
 ^^^^^^^^^^^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
             ^
             source.ts meta.block.ts switch-statement.expr.ts punctuation.definition.block.ts
              ^^
              source.ts meta.block.ts
>        }
 ^^^^^^^^
 source.ts meta.block.ts
         ^
         source.ts meta.block.ts punctuation.definition.block.ts
          ^^
          source.ts
>
 ^
 source.ts