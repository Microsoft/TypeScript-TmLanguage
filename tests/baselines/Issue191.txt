original file
-----------------------------------
class Thing {
    ^^constructor(^^public ^^content: ^^string){
        var ^^prop = Q.defer<^^boolean>(^^);
        ^^this.store = new ^^Data();
        ^^gaze(path.join(this.content, "^^**/*.json"^^), (err, watch) => {
            ^^process.stuout.write(`^^Watching for changes in:`^^);
        })
    };
}

class Thing<^^T, ^^U> {
    ^^constructor(^^public ^^content: ^^string){
        var ^^prop = Q.defer<^^boolean>(^^);
        ^^this.store = new ^^Data();
        ^^gaze(path.join(this.content, "^^**/*.json"^^), (err, watch) => {
            ^^process.stuout.write(`^^Watching for changes in:`^^);
        })
    };
}

-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>class Thing {
>    constructor(public content: string){
     ^^^^^^^^^^^
     [2, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.type.ts 
                 ^^^^^^
                 [2, 17]: source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts storage.modifier.ts 
                        ^^^^^^^
                        [2, 24]: source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts 
                                 ^^^^^^
                                 [2, 33]: source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts support.type.primitive.ts 
>        var prop = Q.defer<boolean>();
             ^^^^
             [3, 13]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts 
                            ^^^^^^^
                            [3, 28]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.function-call.ts meta.type.parameters.ts support.type.primitive.ts 
                                     ^
                                     [3, 37]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.function-call.ts meta.brace.round.ts 
>        this.store = new Data();
         ^^^^
         [4, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.language.this.ts 
                          ^^^^
                          [4, 26]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts new.expr.ts entity.name.type.ts 
>        gaze(path.join(this.content, "**/*.json"), (err, watch) => {
         ^^^^
         [5, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts variable.function.ts 
                                       ^^^^^^^^^
                                       [5, 39]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.function-call.ts string.quoted.double.ts 
                                                 ^
                                                 [5, 49]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.function-call.ts meta.brace.round.ts 
>            process.stuout.write(`Watching for changes in:`);
             ^^^^^^^
             [6, 13]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.arrow.ts meta.block.ts meta.function-call.ts support.variable.object.process.ts 
                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                   [6, 35]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.arrow.ts meta.block.ts meta.function-call.ts string.template.ts 
                                                            ^
                                                            [6, 60]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.arrow.ts meta.block.ts meta.function-call.ts meta.brace.round.ts 
>        })
>    };
>}
>
>class Thing<T, U> {
             ^
             [11, 13]: source.ts meta.class.ts meta.type.parameters.ts entity.name.type.ts 
                ^
                [11, 16]: source.ts meta.class.ts meta.type.parameters.ts entity.name.type.ts 
>    constructor(public content: string){
     ^^^^^^^^^^^
     [12, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.type.ts 
                 ^^^^^^
                 [12, 17]: source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts storage.modifier.ts 
                        ^^^^^^^
                        [12, 24]: source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts 
                                 ^^^^^^
                                 [12, 33]: source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts support.type.primitive.ts 
>        var prop = Q.defer<boolean>();
             ^^^^
             [13, 13]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts 
                            ^^^^^^^
                            [13, 28]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.function-call.ts meta.type.parameters.ts support.type.primitive.ts 
                                     ^
                                     [13, 37]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.function-call.ts meta.brace.round.ts 
>        this.store = new Data();
         ^^^^
         [14, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.language.this.ts 
                          ^^^^
                          [14, 26]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts new.expr.ts entity.name.type.ts 
>        gaze(path.join(this.content, "**/*.json"), (err, watch) => {
         ^^^^
         [15, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts variable.function.ts 
                                       ^^^^^^^^^
                                       [15, 39]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.function-call.ts string.quoted.double.ts 
                                                 ^
                                                 [15, 49]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.function-call.ts meta.brace.round.ts 
>            process.stuout.write(`Watching for changes in:`);
             ^^^^^^^
             [16, 13]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.arrow.ts meta.block.ts meta.function-call.ts support.variable.object.process.ts 
                                   ^^^^^^^^^^^^^^^^^^^^^^^^
                                   [16, 35]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.arrow.ts meta.block.ts meta.function-call.ts string.template.ts 
                                                            ^
                                                            [16, 60]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.function-call.ts meta.arrow.ts meta.block.ts meta.function-call.ts meta.brace.round.ts 
>        })
>    };
>}
>