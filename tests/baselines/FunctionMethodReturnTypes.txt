original file
-----------------------------------
/* Function return type tests */
^^export function ^^testFunctionReturnType1(): string [] { ^^return [""] }
^^export function ^^testFunctionReturnType2(): {} { ^^return {} }
^^export function ^^testFunctionReturnType3(): {a: A, b: B} { ^^return {a: {m: "" }, b: {m1: "" }} }
^^export function ^^testFunctionReturnType4(): [number, number] { ^^return [1, 1] }
^^export function ^^testFunctionReturnType5(): Array<A> { ^^return [{ m: "" }] }
^^export function ^^testFunctionReturnType6(): new () => number { ^^throw new Error(""); }
^^export function ^^testFunctionReturnType7(): (() => number) { ^^throw new Error(""); }
^^export function ^^testFunctionReturnType8(): (() => number) [] { ^^throw new Error(""); }
^^export function ^^testFunctionReturnType9(): (() => number) | (() => string) { ^^throw new Error(""); }
^^export function ^^testFunctionReturnType10(): {a: A, b: B} [] { ^^return [{a: {m: "" }, b: {m1: "" }}] }
^^export function ^^testFunctionReturnType11(): number | string { ^^return 1 }
^^export function ^^testFunctionReturnType12(): number | string [] { ^^return }
^^export function ^^testFunctionReturnType13(): [number, number] | string [] { ^^return [""] }

class TestClass {
    /* method return type tests */
    ^^public ^^testMethodReturnType1(): string [] { ^^return [""] }
    ^^public ^^testMethodReturnType2(): {} { ^^return {} }
    ^^public ^^testMethodReturnType3(): {a: A, b: B} { ^^return {a: {m: "" }, b: {m1: "" }} }
    ^^public ^^testMethodReturnType4(): [number, number] { ^^return [1, 1] }
    ^^public ^^testMethodReturnType5(): Array<A> { ^^return [{ m: "" }] }
    ^^public ^^testMethodReturnType6(): new () => number { ^^throw new Error(""); }
    ^^public ^^testMethodReturnType7(): (() => number) { ^^throw new Error(""); }
    ^^public ^^testMethodReturnType8(): (() => number) [] { ^^throw new Error(""); }
    ^^public ^^testMethodReturnType9(): (() => number) | (() => string) { ^^throw new Error(""); }
    ^^public ^^testMethodReturnType10(): {a: A, b: B} [] { ^^return [{a: {m: "" }, b: {m1: "" }}] }
    ^^public ^^testMethodReturnType11(): number | string { ^^return 1 }
    ^^public ^^testMethodReturnType12(): number | string [] { ^^return }
    ^^public ^^testMethodReturnType13(): [number, number] | string [] { ^^return [""] }
}
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>/* Function return type tests */
>export function testFunctionReturnType1(): string [] { return [""] }
 ^^^^^^
 [2, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [2, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                        ^^^^^^
                                                        [2, 56]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType2(): {} { return {} }
 ^^^^^^
 [3, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [3, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                 ^^^^^^
                                                 [3, 49]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType3(): {a: A, b: B} { return {a: {m: "" }, b: {m1: "" }} }
 ^^^^^^
 [4, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [4, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                           ^^^^^^
                                                           [4, 59]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType4(): [number, number] { return [1, 1] }
 ^^^^^^
 [5, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [5, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                               ^^^^^^
                                                               [5, 63]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType5(): Array<A> { return [{ m: "" }] }
 ^^^^^^
 [6, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [6, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                       ^^^^^^
                                                       [6, 55]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType6(): new () => number { throw new Error(""); }
 ^^^^^^
 [7, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [7, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                               ^^^^^
                                                               [7, 63]: source.ts meta.function.ts meta.block.ts keyword.control.trycatch.flow.ts 
>export function testFunctionReturnType7(): (() => number) { throw new Error(""); }
 ^^^^^^
 [8, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [8, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                             ^^^^^
                                                             [8, 61]: source.ts meta.function.ts meta.block.ts keyword.control.trycatch.flow.ts 
>export function testFunctionReturnType8(): (() => number) [] { throw new Error(""); }
 ^^^^^^
 [9, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [9, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                                ^^^^^
                                                                [9, 64]: source.ts meta.function.ts meta.block.ts keyword.control.trycatch.flow.ts 
>export function testFunctionReturnType9(): (() => number) | (() => string) { throw new Error(""); }
 ^^^^^^
 [10, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^
                 [10, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                                              ^^^^^
                                                                              [10, 78]: source.ts meta.function.ts meta.block.ts keyword.control.trycatch.flow.ts 
>export function testFunctionReturnType10(): {a: A, b: B} [] { return [{a: {m: "" }, b: {m1: "" }}] }
 ^^^^^^
 [11, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^
                 [11, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                               ^^^^^^
                                                               [11, 63]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType11(): number | string { return 1 }
 ^^^^^^
 [12, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^
                 [12, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                               ^^^^^^
                                                               [12, 63]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType12(): number | string [] { return }
 ^^^^^^
 [13, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^
                 [13, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                                  ^^^^^^
                                                                  [13, 66]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>export function testFunctionReturnType13(): [number, number] | string [] { return [""] }
 ^^^^^^
 [14, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^
                 [14, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
                                                                            ^^^^^^
                                                                            [14, 76]: source.ts meta.function.ts meta.block.ts keyword.control.flow.ts 
>
>class TestClass {
>    /* method return type tests */
>    public testMethodReturnType1(): string [] { return [""] }
     ^^^^^^
     [18, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [18, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                 ^^^^^^
                                                 [18, 49]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType2(): {} { return {} }
     ^^^^^^
     [19, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [19, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                          ^^^^^^
                                          [19, 42]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType3(): {a: A, b: B} { return {a: {m: "" }, b: {m1: "" }} }
     ^^^^^^
     [20, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [20, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                    ^^^^^^
                                                    [20, 52]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType4(): [number, number] { return [1, 1] }
     ^^^^^^
     [21, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [21, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                        ^^^^^^
                                                        [21, 56]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType5(): Array<A> { return [{ m: "" }] }
     ^^^^^^
     [22, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [22, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                ^^^^^^
                                                [22, 48]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType6(): new () => number { throw new Error(""); }
     ^^^^^^
     [23, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [23, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                        ^^^^^
                                                        [23, 56]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.trycatch.flow.ts 
>    public testMethodReturnType7(): (() => number) { throw new Error(""); }
     ^^^^^^
     [24, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [24, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                      ^^^^^
                                                      [24, 54]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.trycatch.flow.ts 
>    public testMethodReturnType8(): (() => number) [] { throw new Error(""); }
     ^^^^^^
     [25, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [25, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                         ^^^^^
                                                         [25, 57]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.trycatch.flow.ts 
>    public testMethodReturnType9(): (() => number) | (() => string) { throw new Error(""); }
     ^^^^^^
     [26, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^
            [26, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                                       ^^^^^
                                                                       [26, 71]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.trycatch.flow.ts 
>    public testMethodReturnType10(): {a: A, b: B} [] { return [{a: {m: "" }, b: {m1: "" }}] }
     ^^^^^^
     [27, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^
            [27, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                        ^^^^^^
                                                        [27, 56]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType11(): number | string { return 1 }
     ^^^^^^
     [28, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^
            [28, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                        ^^^^^^
                                                        [28, 56]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType12(): number | string [] { return }
     ^^^^^^
     [29, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^
            [29, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                           ^^^^^^
                                                           [29, 59]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>    public testMethodReturnType13(): [number, number] | string [] { return [""] }
     ^^^^^^
     [30, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^
            [30, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
                                                                     ^^^^^^
                                                                     [30, 69]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.flow.ts 
>}