original file
-----------------------------------
/* Function overload tests */
^^export function ^^testFunctionOverload(p: number): new() => any
^^export function ^^testFunctionOverload(p: string)
^^export function ^^testFunctionOverload(p: string [])
^^export function ^^testFunctionOverload(p: {})
^^export function ^^testFunctionOverload(p: {a: A, b:B} | string [])
^^export function ^^testFunctionOverload(p: any): new() => any {
    ^^throw new Error("")
}

^^export function ^^testFunctionOverloadWithSemicolon(p: number): new () => any;
^^export function ^^testFunctionOverloadWithSemicolon(p: string);
^^export function ^^testFunctionOverloadWithSemicolon(p: string[]);
^^export function ^^testFunctionOverloadWithSemicolon(p: {});
^^export function ^^testFunctionOverloadWithSemicolon(p: { a: A, b: B } | string[]);
^^export function ^^testFunctionOverloadWithSemicolon(p: any): new () => any {
    ^^throw new Error("")
}


class testClass {
    /* Function overload tests */
    ^^public ^^testMethodOverload(p: number): new() => any
    ^^public ^^testMethodOverload(p: string)
    ^^public ^^testMethodOverload(p: string [])
    ^^public ^^testMethodOverload(p: {})
    ^^public ^^testMethodOverload(p: {a: A, b:B} | string [])
    ^^public ^^testMethodOverload(p: any): new() => any {
        ^^throw new Error("")
    }

    ^^public ^^testMethodOverloadWithSemicolon(p: number): new () => any;
    ^^public ^^testMethodOverloadWithSemicolon(p: string);
    ^^public ^^testMethodOverloadWithSemicolon(p: string[]);
    ^^public ^^testMethodOverloadWithSemicolon(p: {});
    ^^public ^^testMethodOverloadWithSemicolon(p: { a: A, b: B } | string[]);
    ^^public ^^testMethodOverloadWithSemicolon(p: any): new () => any {
        ^^throw new Error("")
    }
}

interface I {
    ^^foo(): number
    ^^bar(): string;
}

abstract class C {
    ^^abstract ^^foo()
    ^^abstract ^^bar()
}
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>/* Function overload tests */
>export function testFunctionOverload(p: number): new() => any
 ^^^^^^
 [2, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^
                 [2, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverload(p: string)
 ^^^^^^
 [3, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^
                 [3, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverload(p: string [])
 ^^^^^^
 [4, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^
                 [4, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverload(p: {})
 ^^^^^^
 [5, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^
                 [5, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverload(p: {a: A, b:B} | string [])
 ^^^^^^
 [6, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^
                 [6, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverload(p: any): new() => any {
 ^^^^^^
 [7, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^
                 [7, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>    throw new Error("")
     ^^^^^
     [8, 5]: source.ts meta.function.ts meta.block.ts keyword.control.trycatch.flow.ts 
>}
>
>export function testFunctionOverloadWithSemicolon(p: number): new () => any;
 ^^^^^^
 [11, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 [11, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverloadWithSemicolon(p: string);
 ^^^^^^
 [12, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 [12, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverloadWithSemicolon(p: string[]);
 ^^^^^^
 [13, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 [13, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverloadWithSemicolon(p: {});
 ^^^^^^
 [14, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 [14, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverloadWithSemicolon(p: { a: A, b: B } | string[]);
 ^^^^^^
 [15, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 [15, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>export function testFunctionOverloadWithSemicolon(p: any): new () => any {
 ^^^^^^
 [16, 1]: source.ts meta.function.ts keyword.control.export.ts 
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                 [16, 17]: source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts 
>    throw new Error("")
     ^^^^^
     [17, 5]: source.ts meta.function.ts meta.block.ts keyword.control.trycatch.flow.ts 
>}
>
>
>class testClass {
>    /* Function overload tests */
>    public testMethodOverload(p: number): new() => any
     ^^^^^^
     [23, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^
            [23, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverload(p: string)
     ^^^^^^
     [24, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^
            [24, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverload(p: string [])
     ^^^^^^
     [25, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^
            [25, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverload(p: {})
     ^^^^^^
     [26, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^
            [26, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverload(p: {a: A, b:B} | string [])
     ^^^^^^
     [27, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^
            [27, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverload(p: any): new() => any {
     ^^^^^^
     [28, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^
            [28, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>        throw new Error("")
         ^^^^^
         [29, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.trycatch.flow.ts 
>    }
>
>    public testMethodOverloadWithSemicolon(p: number): new () => any;
     ^^^^^^
     [32, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            [32, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverloadWithSemicolon(p: string);
     ^^^^^^
     [33, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            [33, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverloadWithSemicolon(p: string[]);
     ^^^^^^
     [34, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            [34, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverloadWithSemicolon(p: {});
     ^^^^^^
     [35, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            [35, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverloadWithSemicolon(p: { a: A, b: B } | string[]);
     ^^^^^^
     [36, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            [36, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    public testMethodOverloadWithSemicolon(p: any): new () => any {
     ^^^^^^
     [37, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            [37, 12]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>        throw new Error("")
         ^^^^^
         [38, 9]: source.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.trycatch.flow.ts 
>    }
>}
>
>interface I {
>    foo(): number
     ^^^
     [43, 5]: source.ts meta.interface.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    bar(): string;
     ^^^
     [44, 5]: source.ts meta.interface.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>}
>
>abstract class C {
>    abstract foo()
     ^^^^^^^^
     [48, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
              ^^^
              [48, 14]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>    abstract bar()
     ^^^^^^^^
     [49, 5]: source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts 
              ^^^
              [49, 14]: source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts 
>}